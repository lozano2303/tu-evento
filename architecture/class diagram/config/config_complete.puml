@startuml Complete Config Class Diagram

class ApiExceptionHandler {
    + ResponseEntity<Object> handleException(Exception)
}

class applicationConfig {
    - LoginRepository user
    + AuthenticationManager authenticationManager(AuthenticationConfiguration)
    + AuthenticationProvider getAuthenticationProvider()
    + PasswordEncoder passwordEncoder()
    + UserDetailsService userDetailsService()
}

class CorsConfig {
    + CorsFilter corsFilter()
}

class EmailConfig {
    - String host
    - String username
    - String password
    - String port
    + JavaMailSender javaMailSender()
}

class OAuth2LoginSuccessHandler {
    - LoginServiceImpl userService
    + void onAuthenticationSuccess(HttpServletRequest, HttpServletResponse, Authentication)
}

class SecurityConfig {
    - AuthenticationProvider authProvider
    - jwtAuthenticationFilter jwtAuthenticationFilter
    - customOauht2UserService customOAuth2UserService
    - OAuth2LoginSuccessHandler oAuth2LoginSuccessHandler
    + SecurityFilterChain securityFilterChain(HttpSecurity)
}

class StorageConfig {
    - String accessKey
    - String secretKey
    - String region
    + S3Client s3Client()
}

class SwaggerConfig {
    + OpenAPI customOpenAPI()
}

class customOauht2UserService {
    - RegisterWithOAuth2EmailService oauth2EmailService
    - UserServiceImpl userService
    - LoginServiceImpl loginService
    - UserRepository userRepository
    + OAuth2User loadUser(OAuth2UserRequest)
    + String getSaltString()
}

' Relationships
OAuth2LoginSuccessHandler --> LoginServiceImpl : userService
SecurityConfig --> jwtAuthenticationFilter : jwtAuthenticationFilter
SecurityConfig --> customOauht2UserService : customOAuth2UserService
SecurityConfig --> OAuth2LoginSuccessHandler : oAuth2LoginSuccessHandler
customOauht2UserService --> RegisterWithOAuth2EmailService : oauth2EmailService
customOauht2UserService --> UserServiceImpl : userService
customOauht2UserService --> LoginServiceImpl : loginService

@enduml